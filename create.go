package apimigrate

import (
	"fmt"
	"os"
	"path/filepath"
	"regexp"
	"strings"
	"time"
)

// CreateOptions defines parameters for creating a new migration file.
// Dir must be a writable directory. Name is slugified for the filename and used in the template.
//
// The filename format is: YYYYMMDDHHMMSS_slug.yaml (UTC).
// The function returns the full created path.
// It never overwrites an existing file (returns error if exists).
type CreateOptions struct {
	Name string
	Dir  string
}

// CreateMigration generates a new migration YAML file with a basic task template
// under opts.Dir using a timestamp-based filename and returns its full path.
func CreateMigration(opts CreateOptions) (string, error) {
	if strings.TrimSpace(opts.Dir) == "" {
		return "", fmt.Errorf("missing Dir for CreateMigration")
	}
	// Ensure directory exists
	if err := os.MkdirAll(opts.Dir, 0o755); err != nil {
		return "", fmt.Errorf("failed to ensure migration dir: %w", err)
	}
	name := strings.TrimSpace(opts.Name)
	if name == "" {
		name = "task"
	}
	slug := slugify(name)
	if slug == "" {
		slug = "task"
	}
	// Timestamp-based filename (UTC)
	ts := time.Now().UTC().Format("20060102150405")
	fname := fmt.Sprintf("%s_%s.yaml", ts, slug)
	path := filepath.Join(opts.Dir, fname)
	// Do not overwrite existing files
	if _, err := os.Stat(path); err == nil {
		return "", fmt.Errorf("file already exists: %s", path)
	}
	content := templateContent(slug)
	if err := os.WriteFile(path, []byte(content), 0o600); err != nil {
		return "", fmt.Errorf("failed to write file: %w", err)
	}
	return path, nil
}

// CreateMigration is also exposed as a convenience method on Migrator using m.Dir.
func (m *Migrator) CreateMigration(name string) (string, error) {
	return CreateMigration(CreateOptions{Name: name, Dir: m.Dir})
}

var nonWord = regexp.MustCompile(`[^a-zA-Z0-9_]+`)

func slugify(s string) string {
	s = strings.TrimSpace(strings.ToLower(s))
	s = strings.ReplaceAll(s, " ", "_")
	s = nonWord.ReplaceAllString(s, "_")
	s = strings.Trim(s, "_")
	return s
}

func templateContent(name string) string {
	return fmt.Sprintf(`---
# Generated by apimigrate create on %s (UTC)
# Edit the request/response sections as needed. Headers must be a list of name/value objects.
up:
  name: %s
  env: { }
  request:
    method: GET
    url: https://example.com
    headers:
      - name: User-Agent
        value: apimigrate
      # - name: Authorization
      #   value: "Bearer {{.auth.token_name}}"
    # body: '{"key":"{{.env.value}}"}'
    # render_body: true
  response:
    result_code: ["200"]
    # env_from:
    #   example: path.to.value

# Optional rollback step (delete or revert). Comment out if not applicable.
# down:
#   name: %s-rollback
#   method: DELETE
#   url: https://example.com/resource/{{.env.id}}
`, time.Now().UTC().Format(time.RFC3339), name, name)
}
