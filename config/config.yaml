# Sample configuration for apimigrate
#
# Notes:
# - auth: define one or more auth providers as a list. Each item must have
#   a provider type (e.g., "basic", "oauth2", "pocketbase"), a top-level
#   name (logical token name referenced by request.auth_name), and a nested
#   config object with provider-specific fields. Tokens are acquired at startup
#   and stored under the logical name for use in migrations via auth_name.
# - migrate_dir: where your versioned migration YAML files live.
# - env: global key/value variables available to all migrations. You can also
#   pull values from environment variables via valueFromEnv.
# - store.save_response_body: when true, response bodies are recorded to the
#   migration_runs table for observability; when false, only status codes are stored.
---
# Example: two auth providers
auth:
  # Basic auth provider (sends Authorization: Basic <base64>)
  - type: basic
    name: example_basic          # referenced by request.auth_name in migrations
    config:
      username: admin
      password: admin

  # OAuth2 password grant (Keycloak/dev friendly)
  # Uncomment and adjust if needed
  # - type: oauth2
  #   name: keycloak
  #   config:
  #     grant_type: password
  #     grant_config:
  #       client_id: admin-cli
  #       # client_secret: ""
  #       username: admin
  #       password: root
  #       token_url: http://localhost:8080/realms/master/protocol/openid-connect/token
  #       auth_url:  http://localhost:8080/realms/master/protocol/openid-connect/auth

# Directory that contains your versioned migrations (001_*.yaml, 002_*.yaml, ...)
# Point this to one of the example migration folders or your own.
migrate_dir: ./config/migration

wait:
# Example HTTP health check (uncomment and adjust as needed)
# url: "{{.api_base}}/health"
# method: GET       # default: GET
# status: 200       # default: 200
# timeout: 30s      # default: 60s
# interval: 1s      # default: 2s

# Global environment variables available to all migrations
env:
  - name: api_base
    value: http://localhost:3000
  - name: gf_admin_auth
    # Authorization header value for Grafana admin; used if not relying on auth_name
    value: Basic YWRtaW46YWRtaW4=
  - name: example_user
    value: sample
#  - name: example_from_os
#    valueFromEnv: EXAMPLE_FROM_OS

# Logging configuration
logging:
  # Log level: error, warn, info, debug (default: info)
  # Note: --verbose/-v flag overrides this to debug level
  level: info
  # Log format: text, json (default: text)
  # Use 'json' for production/log aggregation systems
  format: text
  # Mask sensitive information in logs (default: true)
  # When enabled, passwords, API keys, tokens, etc. are automatically masked
  mask_sensitive: true

# Store settings
store:
  # Whether to record response bodies alongside status codes in migration history
  save_response_body: false
  # Backend type: "sqlite" (default) or "postgres"
  # type: sqlite
  # SQLite options (used when type is sqlite)
  sqlite:
  # path: ./config/migration/apimigrate.db
  # PostgreSQL options (used when type is postgres)
  # postgres:
  #   # Option A: provide full DSN
  #   # dsn: postgres://user:pass@localhost:5432/apimigrate?sslmode=disable
  #   # Option B: or provide components to build DSN
  #   host: localhost
  #   port: 5432
  #   user: postgres
  #   password: postgres
  #   dbname: apimigrate
  #   sslmode: disable

  # Optional: customize table names.
  # You can set a single prefix to derive names, or override individually.
  # table_prefix: app1            # results in: app1_schema_migrations, app1_migration_runs, app1_stored_env
  # table_schema_migrations: schema_migrations
  # table_migration_runs: migration_runs
  # table_stored_env: stored_env

# HTTP client TLS settings
# If none of these are set, apimigrate defaults minimum TLS version to 1.3.
client:
# Explicit options:
# insecure: false
# min_tls_version: ""   # e.g., "1.2" or "tls1.2"
# max_tls_version: ""   # e.g., "1.3" or "tls1.3"

# Request body templating default
# When true (default), request.body and request.body_file contents are rendered as Go templates using env/auth.
# When set to false, bodies are sent as-is and braces like {{ abc }} are not substituted.
# You can override per-request with request.render_body in a migration.
# render_body: true
