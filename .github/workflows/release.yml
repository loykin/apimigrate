name: Release

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: read

jobs:
  build:
    name: Build binaries
    runs-on: ubuntu-latest
    env:
      CGO_ENABLED: 0
    strategy:
      fail-fast: false
      matrix:
        goos: [linux, darwin, windows]
        goarch: [amd64, arm64]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@d35c59abb061a4a6fb18e82ac0862c26744d6ab5
        with:
          go-version-file: go.mod
          cache: true

      - name: Show Go version
        run: go version

      - name: Build
        shell: bash
        run: |
          mkdir -p dist
          BIN_NAME=apimigrate
          EXT=""
          if [ "${{ matrix.goos }}" = "windows" ]; then EXT=".exe"; fi
          BIN_FILE="${BIN_NAME}${EXT}"
          OUT_DIR="${BIN_NAME}_${{ matrix.goos }}_${{ matrix.goarch }}"

          echo "Building $BIN_FILE for $OUT_DIR"
          GOOS=${{ matrix.goos }} GOARCH=${{ matrix.goarch }} go build -o "$BIN_FILE" ./cmd/apimigrate

          mkdir -p "$OUT_DIR/bin"
          cp "$BIN_FILE" "$OUT_DIR/bin/"
          if [ -f README.md ]; then cp README.md "$OUT_DIR/"; fi
          if [ -f LICENSE ]; then cp LICENSE "$OUT_DIR/"; fi
          if [ -d config ]; then
            cp -R config "$OUT_DIR/"
            find "$OUT_DIR/config" -name '*.db' -type f -delete || true
          fi

          if [ "${{ matrix.goos }}" = "windows" ]; then
            zip -9 -r "dist/${OUT_DIR}.zip" "$OUT_DIR"
          else
            tar -czf "dist/${OUT_DIR}.tar.gz" "$OUT_DIR"
          fi

          rm -rf "$OUT_DIR" "$BIN_FILE"


      - name: Upload build artifacts
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02
        with:
          name: binaries-${{ matrix.goos }}-${{ matrix.goarch }}
          path: dist/*
          if-no-files-found: error

  release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: build

    permissions:
      contents: write

    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@634f93cb2916e3fdff6788551b99b062d0335ce0
        with:
          pattern: binaries-*
          merge-multiple: true

      - name: Display files to release
        run: ls -la

      - name: Generate checksums
        run: |
          sha256sum *.tar.gz *.zip > checksums.txt
          cat checksums.txt

      - name: Sign artifacts with GPG (optional)
        env:
          GPG_KEY: ${{ secrets.GPG_PRIVATE_KEY }}
          GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}
        run: |
          if [ -z "${GPG_KEY}" ]; then
            echo "No GPG key provided; skipping signing."
            exit 0
          fi
          echo "$GPG_KEY" | gpg --batch --yes --import
          for f in *.tar.gz *.zip checksums.txt; do
            gpg --batch --yes --pinentry-mode loopback --passphrase "$GPG_PASSPHRASE" --armor --detach-sign "$f"
          done

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          files: |
            *.tar.gz
            *.tar.gz.asc
            *.zip
            *.zip.asc
            checksums.txt
            checksums.txt.asc
          generate_release_notes: true
          fail_on_unmatched_files: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
