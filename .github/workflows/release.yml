name: Release

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: write

jobs:
  build:
    name: Build binaries
    runs-on: ubuntu-latest
    env:
      CGO_ENABLED: 0
    strategy:
      fail-fast: false
      matrix:
        goos: [linux, darwin, windows]
        goarch: [amd64, arm64]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version-file: go.mod
          cache: true

      - name: Show Go version
        run: go version

      - name: Build
        shell: bash
        run: |
          mkdir -p dist
          BIN_NAME=apimigrate
          EXT=""
          if [ "${{ matrix.goos }}" = "windows" ]; then EXT=".exe"; fi
          OUT="${BIN_NAME}_${{ matrix.goos }}_${{ matrix.goarch }}${EXT}"
          echo "Building $OUT"
          GOOS=${{ matrix.goos }} GOARCH=${{ matrix.goarch }} go build -o "$OUT" ./cmd/apimigrate
          mkdir pkg
          cp "$OUT" pkg/
          if [ -f README.md ]; then cp README.md pkg/; fi
          if [ -f LICENSE ]; then cp LICENSE pkg/; fi
          # Include example config directory (exclude any SQLite DB files)
          if [ -d config ]; then
            cp -R config pkg/
            find pkg/config -name '*.db' -type f -delete || true
          fi
          ARCHIVE_BASE="${BIN_NAME}_${{ matrix.goos }}_${{ matrix.goarch }}"
          if [ "${{ matrix.goos }}" = "windows" ]; then
            zip -9 -r "dist/${ARCHIVE_BASE}.zip" pkg
          else
            tar -czf "dist/${ARCHIVE_BASE}.tar.gz" -C pkg .
          fi
          rm -rf pkg "$OUT"

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: binaries-${{ matrix.goos }}-${{ matrix.goarch }}
          path: dist/*
          if-no-files-found: error

  release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: binaries-*
          merge-multiple: true

      - name: Display files to release
        run: ls -la

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          files: |
            *.tar.gz
            *.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
